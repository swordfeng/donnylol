{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/sw.ts","webpack:///./src/swHandler.ts","webpack:///./src/rules.ts","webpack:///./node_modules/idb/build/esm/wrap-idb-value.js","webpack:///./node_modules/idb/build/esm/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","self","addEventListener","event","respondWith","handleRequest","request","catch","e","console","error","url","fetch","waitUntil","syncRules","async","Request","response","ok","Error","rules","json","caches","openDB","db","createObjectStore","put","JSON","stringify","Date","now","log","request_url","URL","pathname","parse","update_time","fetchRules","query","searchParams","redirect_url","handleQuery","Response","redirect","matchRule","spaceIdx","indexOf","keyword","slice","remainQuery","rule","keywords","search","default","match","RegExp","exec","matchedQuery","length","replaceUrl","replace","encodeURIComponent","ruleMatch","suggestion","suggestionUrl","result","map","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","target","prop","receiver","IDBTransaction","objectStoreNames","undefined","objectStore","wrap","set","has","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","this","storeNames","tx","sort","transformCachableValue","done","Promise","resolve","reject","unlisten","removeEventListener","complete","DOMException","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","some","Proxy","IDBRequest","promise","success","then","promisifyRequest","newValue","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","oldVersion","newVersion","deleteDB","deleteDatabase","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","useIndex","isWrite","method","storeName","store","index","shift","all","oldTraps","callback"],"mappings":"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","file":"sw.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { handleRequest, syncRules } from './swHandler'\n\nself.addEventListener('fetch', event => {\n    event.respondWith(handleRequest(event.request).catch(e => {\n        console.error(`Failed to handle request ${event.request.url}:`, e)\n        return fetch(event.request)\n    }))\n})\n\nself.addEventListener('sync', event => {\n    event.waitUntil(syncRules().catch(e => {\n        console.error(`Failed to sync rules:`, e)\n    }));\n})","import { openDB, IDBPDatabase } from 'idb'\nimport { handleQuery, Rule } from './rules'\n\nconst DB_NAME = 'db'\nconst STORE_NAME = 'cached_rules'\nconst RULES_KEY = 'rules'\nconst UPDATE_TIME_KEY = 'update_time'\n\nexport async function handleRequest(request: Request): Promise<Response> {\n    const request_url = new URL(request.url)\n    if (request_url.pathname === '/') {\n        const rules = await fetchRules()\n        const query = request_url.searchParams.get(\"q\")\n        if (query) {\n            const redirect_url = handleQuery(query, rules)\n            if (redirect_url) return Response.redirect(redirect_url, 302)\n        }\n    }\n    return fetch(request)\n}\n\nasync function fetchRules(): Promise<Rule[]> {\n    const caches: IDBPDatabase<any> = await openDB(DB_NAME, 1, {\n        upgrade(db) {\n            db.createObjectStore(STORE_NAME)\n        },\n    })\n    let rules = null\n    try {\n        rules = JSON.parse(await caches.get(STORE_NAME, RULES_KEY))\n    } catch (e) {\n        // pass\n    }\n    if (!rules) {\n        rules = await syncRules()\n    } else {\n        const update_time = await caches.get(STORE_NAME, UPDATE_TIME_KEY)\n        if (Date.now() - update_time > 4 * 60 * 60 * 1000) {\n            syncRules()\n        }\n    }\n    return rules\n}\n\nexport async function syncRules(): Promise<Rule[]> {\n    const request = new Request('/rules.json')\n    const response = await fetch(request)\n    if (!response.ok) throw new Error('no rules available')\n    const rules = await response.json()\n    const caches: IDBPDatabase<any> = await openDB(DB_NAME, 1, {\n        upgrade(db) {\n            db.createObjectStore(STORE_NAME)\n        },\n    })\n    await caches.put(STORE_NAME, JSON.stringify(rules), RULES_KEY)\n    await caches.put(STORE_NAME, Date.now(), UPDATE_TIME_KEY)\n    console.log('Rules sync complete')\n    return rules\n}","\nexport interface Rule {\n    keywords?: string[],\n    match?: string,\n    search?: string,\n    suggestion?: string,\n    default?: string,\n}\n\ninterface RuleMatch {\n    rule: Rule,\n    keyword: string,\n    remainQuery: string,\n    match?: RegExpExecArray\n}\n\nfunction matchRule(query: string, rules: Rule[]): RuleMatch | null {\n    const spaceIdx = query.indexOf(' ');\n    const keyword = spaceIdx === -1 ? query : query.slice(0, spaceIdx);\n    const remainQuery = spaceIdx === -1 ? '' : query.slice(spaceIdx + 1);\n    for (const rule of rules) {\n        if (rule.keywords && rule.keywords.indexOf(keyword) !== -1) {\n            if ((remainQuery && rule.search) || (!remainQuery && rule.default)) {\n                return {rule, keyword, remainQuery};\n            }\n        }\n        if (rule.match) {\n            const match = new RegExp('^(?:' + rule.match + ')(?=$| )').exec(query);\n            if (match) {\n                const matchedQuery = query.slice(match[0].length + 1);\n                if ((matchedQuery && rule.search) || (!matchedQuery && rule.default)) {\n                    return {rule, keyword: match[0], remainQuery: matchedQuery, match}\n                }\n            }\n        }\n        if (!rule.keywords && !rule.match) {\n            return {rule, keyword: '', remainQuery: query};\n        }\n    }\n    return null\n}\n\nexport function handleQuery(query: string, rules: Rule[]): string | null {\n    const ruleMatch = matchRule(query, rules)\n    if (!ruleMatch) return null\n    const {rule, keyword, remainQuery, match} = ruleMatch\n    if (!remainQuery && rule.default) {\n        return replaceUrl(rule.default, keyword, remainQuery, match)\n    }\n    return replaceUrl(rule.search as string, keyword, remainQuery, match)\n}\n\ntype SuggestionResult = [string, string[], any, any]\n\nexport async function handleSuggestion(query: string, rules: Rule[]): Promise<SuggestionResult> {\n    const ruleMatch = matchRule(query, rules)\n    if (!ruleMatch) return [query, [], [], []]\n    const {rule, keyword, remainQuery, match} = ruleMatch\n    if (!remainQuery || !rule.suggestion) return [query, [], [], []]\n    const suggestionUrl = replaceUrl(rule.suggestion, keyword, remainQuery, match)\n    const response = await fetch(new Request(suggestionUrl))\n    const result: SuggestionResult = await response.json()\n    if (result[0] !== remainQuery) return [query, [], [], []]\n    result[0] = query\n    result[1] = result[1].map(suggestion => `${keyword} ${suggestion}`)\n    return result\n}\n\nfunction replaceUrl(url: string, keyword: string, query: string, match?: RegExpExecArray) {\n    url = url.replace(/\\{keyword\\}/g, encodeURIComponent(keyword));\n    url = url.replace(/\\{query\\}/g, encodeURIComponent(query).replace(/%20/g, '+'));\n    if (match) {\n        for (let i = 1; i < match.length; i++) {\n            url = url.replace(new RegExp(`\\\\{${i}\\\\}`, 'g'), encodeURIComponent(match[i]));\n        }\n    }\n    return url;\n}","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n"],"sourceRoot":""}